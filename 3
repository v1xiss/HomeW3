using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

class Injector
{
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ 
    const int PROCESS_ALL_ACCESS = 0x1F0FFF;
    const uint MEM_COMMIT = 0x1000;
    const uint PAGE_EXECUTE_READWRITE = 0x40;

    // –Ü–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫
    [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr OpenProcess(int dwDesiredAccess, bool bInheritHandle, int dwProcessId);

    [DllImport("kernel32.dll", CharSet = CharSet.Auto)]
        public static extern IntPtr GetModuleHandle(string lpModuleName);

    [DllImport("kernel32.dll", CharSet = CharSet.Ansi)]
        public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    [DllImport("kernel32.dll")]
        public static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes,
            uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

    [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress,
            uint dwSize, uint flAllocationType, uint flProtect);

    [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress,
            byte[] lpBuffer, uint nSize, out IntPtr lpNumberOfBytesWritten);

    [DllImport("kernel32.dll")]
        static extern bool CloseHandle(IntPtr hObject);

    [DllImport("mscoree.dll", CharSet = CharSet.Unicode)]
        static extern int CorBindToRuntimeEx(
            [In, MarshalAs(UnmanagedType.LPWStr)] string pwszVersion,
            [In, MarshalAs(UnmanagedType.LPWStr)] string pwszBuildFlavor,
            [In] uint dwFlags,
            [In] ref Guid rpcid,
            [In] ref Guid riid,
            [Out, MarshalAs(UnmanagedType.Interface)] out object ppv);

    static void Main(string[] args)
    {
        Console.WriteLine("--- Managed DLL Injector –¥–ª—è –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –∑–∞–¥–∞—á—ñ ---");

        // 1. –ü–æ—à—É–∫ 
        Process[] processes = Process.GetProcessesByName("VipApp");
        if (processes.Length == 0)
        {
            Console.WriteLine("‚ùå –ü—Ä–æ—Ü–µ—Å 'VipApp' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å VipApp.exe!");
            return;
        }

        Process target = processes[0];
        Console.WriteLine($"‚úÖ –ü—Ä–æ—Ü–µ—Å VipApp –∑–Ω–∞–π–¥–µ–Ω–æ. PID: {target.Id}");

        // 2. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —à–ª—è—É—Ö
        string dllName = "VipBypass.dll";
        string dllPath = Path.GetFullPath(dllName);

        if (!File.Exists(dllPath))
        {
            Console.WriteLine($"‚ùå DLL '{dllName}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {dllPath}");
            return;
        }
        Console.WriteLine($"–í–∏–±—Ä–∞–Ω–∞ DLL: {dllPath}");


        // 3. –Ü–Ω–∂–µ–∫—Ü—ñ—è
        IntPtr hProcess = OpenProcess(PROCESS_ALL_ACCESS, false, target.Id);

        if (hProcess == IntPtr.Zero)
        {
            Console.WriteLine("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
            return;
        }

        try
        {
            // –í–∏–¥—ñ–ª–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ 
            byte[] dllBytes = Encoding.Default.GetBytes(dllPath);
            IntPtr allocMem = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)dllPath.Length + 1,
                MEM_COMMIT, PAGE_EXECUTE_READWRITE);

            if (allocMem == IntPtr.Zero)
            {
                Console.WriteLine("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥—ñ–ª–∏—Ç–∏ –ø–∞–º'—è—Ç—å.");
                return;
            }

            // –ó–∞–ø–∏—Å —à–ª—è—Ö—É 
            WriteProcessMemory(hProcess, allocMem, dllBytes, (uint)dllBytes.Length, out IntPtr _);

            IntPtr loadLibraryAddr = GetProcAddress(GetModuleHandle("kernel32.dll"), "LoadLibraryA");

            IntPtr remoteThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, loadLibraryAddr, allocMem, 0, IntPtr.Zero);

            if (remoteThread != IntPtr.Zero)
            {
                Console.WriteLine("üöÄ DLL —ñ–Ω'—î–∫—Ç–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ LoadLibraryA.");

                
                Console.WriteLine("‚úÖ –û–±—Ö—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å —É VipApp.");
            }
            else
            {
                Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–¥–∞–ª–µ–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É. –ö–æ–¥ –ø–æ–º–∏–ª–∫–∏: {Marshal.GetLastWin32Error()}");
            }
        }
        finally
        {
            if (hProcess != IntPtr.Zero)
                CloseHandle(hProcess);
        }

        Console.WriteLine("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –≤–∏—Ö–æ–¥—É.");
        Console.ReadLine();
    }
}
